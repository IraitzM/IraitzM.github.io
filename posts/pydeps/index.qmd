---
title: "Python project management"
author: "Iraitz Montalban"
date: today
categories: [dependencies, python]
image: "pydeps.png"
---

There are som many _requirements.txt_ files out there. Oh man. I do struggle every time somebody asks for the requirements file. There are so many options much better than that.

## The _old_ one

[Poetry](https://python-poetry.org/) is probably the most known one, in particular when it comes to software development. It set the standard on how we should move forward managing python projects.

## My main option

I have been using [PDM](https://pdm-project.org/en/latest/) for a while now. It creates a basic structure and you don't need to worry about the development dependencies. They will be installed by default while keeping everything in order on your TOML file.

## the _new kid on the block_

[Astral](https://astral.sh/) has some cool projects going on. Ruff, is the go to linter and code formatter for many nowadays. It uses Rust under the hood which makes it really performant. They also had [rye](https://rye.astral.sh/) package manager for a while but its successor, [uv](https://docs.astral.sh/uv/), has become the defacto project management tool even though there are some thinks I don't fully like.

The mean feature is... well, it is the Usain Bolt of the package installers. Soooo fast. Solves the dependency tree blazing fast and keeps the local environment up to date.

Two things that make me still prefer PDM over uv is the project initialization. PDM creates a basic folder structure that works for me

```sh
project
| - src/
| - test/
| - pyproject.toml

```
while uv creates a _hello.py_ file that I have to delete all the time.

Probably the most annoying thing about uv is when you need to add all extras to you local development environment. You need to run

```sh
uv sync --all-extras --dev
```
it is a minor thing, but you need to remember it.

More on this? There is a [beautiful entry](https://alpopkes.com/posts/python/packaging_tools/) by Anna-Lena Popkes  on her blog definitely worth checking.